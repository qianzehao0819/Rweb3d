1.摄像头函数的实现

css中.wrap的perspective和#box中的transform-style:preserve-3d提供了一个3D空间和li
三维可视化，但是我们需要一个能从各个角度都能够查看的三维空间，因此必须借助
js实现一个函数，它提供视角的拖动转换，我将它命名为摄像头函数

主要思路:
	给document注册mousedown，mousemove和mouseup的注册必须被囊括在前者里面，并且注册之后需要对应的清除事件，否则事件的多次注册会引起事件的堆叠，即一个元素对应多个相同的事件，这样会造成多余的触发，并且危害会越来越大（这一点在mouseup中有setInterval定时器时尤为明显），因此在mousedown中首先清除了mousemove，其次在mouseup中清除了mousemove。  

	当mousedowm执行时，记录当前鼠标位置，mousemove执行时，不断的执行更新坐标操作和计算差值操作，具体流程为   获取当前鼠标坐标=>计算鼠标坐标差值=>更新旧鼠标坐标=>根据差值计算并且渲染容器的旋转角度
	mouseup主要用于鼠标拖拽之后的缓动效果，原理还是相同，这里就不赘述




2.鼠标点击li查看功能的实现
	原本这个事件应当是相当的简单，但是实际操作起来问题多且繁琐，包括事件执行的先后，以及事件的冒泡（mousedowm,mouseup和click 的冲突）。还有需要根据li的现在状态决定是否记录li的旧状态。最后是以何种方式渲染box和li的坐标，以何种方式返回li的坐标，这些又用到了this通过中间变量currentLi为媒介发送到dom的mouseup函数里面。和hover之间也产生了很多冲突，目前也都完善了



3.布局类型函数
主要是一些简单的数学几何和函数增减性质，不一一赘述



